/*-
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2022 JSQLParser
 * %%
 * Dual licensed under GNU LGPL 2.1 or Apache License 2.0
 * #L%
 */
/* CCJSqlParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
package com.javaoffers.thrid.jsqlparser.parser;

import com.javaoffers.thrid.jsqlparser.parser.feature.Feature;
import com.javaoffers.thrid.jsqlparser.parser.feature.FeatureConfiguration;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {
    public FeatureConfiguration configuration = new FeatureConfiguration();

    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      case 0:
         if ((active5 & 0x2000000000L) != 0L)
            return 77;
         if ((active5 & 0x600006000000L) != 0L)
            return 46;
         if ((active0 & 0x9800000000000000L) != 0L || (active1 & 0x1ffffL) != 0L || (active5 & 0x500000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 116;
         }
         if ((active0 & 0x2000000000L) != 0L || (active3 & 0xf800000000000000L) != 0L || (active4 & 0x3fdL) != 0L)
         {
            jjmatchedKind = 319;
            return 226;
         }
         if ((active5 & 0x40000000L) != 0L)
            return 275;
         if ((active2 & 0x1L) != 0L || (active3 & 0x7ffcfb000000000L) != 0L || (active4 & 0x1700000L) != 0L)
         {
            jjmatchedKind = 319;
            return 159;
         }
         if ((active2 & 0xff8000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 107;
         }
         if ((active0 & 0xdf800000L) != 0L || (active1 & 0x3ffe0000L) != 0L)
         {
            jjmatchedKind = 319;
            return 276;
         }
         if ((active0 & 0x7fbffcL) != 0L || (active1 & 0xff87ffff40000000L) != 0L || (active2 & 0x7fffffeL) != 0L || (active3 & 0x1c000L) != 0L || (active4 & 0x103fff8000000L) != 0L || (active5 & 0x85f800000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 50;
         }
         if ((active5 & 0x200L) != 0L)
            return 35;
         if ((active4 & 0x48ffc00L) != 0L || (active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 277;
         }
         if ((active2 & 0x1fffb000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 90;
         }
         if ((active0 & 0x7feffdf20000000L) != 0L || (active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 200;
         }
         if ((active4 & 0x7c0000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 39;
         }
         if ((active5 & 0x200004000L) != 0L)
            return 278;
         if ((active2 & 0xefe0000000000000L) != 0L || (active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 319;
            return 23;
         }
         if ((active1 & 0x78000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 6;
         }
         if ((active3 & 0x300ffffe0000L) != 0L || (active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 274;
         }
         if ((active3 & 0x3ffeL) != 0L)
         {
            jjmatchedKind = 319;
            return 16;
         }
         if ((active5 & 0x400000000L) != 0L)
            return 266;
         if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 319;
            return 3;
         }
         if ((active5 & 0x118408000L) != 0L)
            return 279;
         if ((active5 & 0x181000L) != 0L)
            return 280;
         return -1;
      case 1:
         if ((active0 & 0x90380000L) != 0L || (active1 & 0xf880000000003000L) != 0L || (active2 & 0x2bf3ff800001007eL) != 0L || (active4 & 0x18L) != 0L || (active5 & 0x4e000000000000L) != 0L)
            return 50;
         if ((active1 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active3 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 170;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 199;
         }
         if ((active3 & 0x4f8000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 158;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 115;
         }
         if ((active2 & 0xc00000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 106;
         }
         if ((active0 & 0x2000000000L) != 0L || (active4 & 0xe0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 236;
         }
         if ((active0 & 0x95feffdf6fc7bffcL) != 0L || (active1 & 0x73fffff7fffcfffL) != 0L || (active2 & 0x440c0010fffeff81L) != 0L || (active3 & 0xff7fb03fffffffffL) != 0L || (active4 & 0x1fffffdffff01L) != 0L || (active5 & 0x1f90000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 50;
         }
         if ((active2 & 0x300000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 111;
         }
         if ((active4 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 225;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 22;
         }
         if ((active2 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 1;
            }
            return 89;
         }
         return -1;
      case 2:
         if ((active0 & 0x95feffffebc71bdcL) != 0L || (active1 & 0xf67ffe1f7fefe1ffL) != 0L || (active2 & 0x661e7f1cfdfe3fdfL) != 0L || (active3 & 0xffffb7b3ffffffffL) != 0L || (active4 & 0x183fffdf3ffe1L) != 0L || (active5 & 0x1fd0000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 50;
         }
         if ((active2 & 0x300000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 110;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 281;
         }
         if ((active2 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 88;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 21;
         }
         if ((active0 & 0x420a420L) != 0L || (active1 & 0x10001e000100e00L) != 0L || (active2 & 0xc180000200c000L) != 0L || (active3 & 0x480c00000000L) != 0L || (active4 & 0x7c00000c0010L) != 0L)
            return 50;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 198;
         }
         if ((active4 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 2;
            }
            return 232;
         }
         return -1;
      case 3:
         if ((active4 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 3;
            }
            return 231;
         }
         if ((active2 & 0x2000000000L) != 0L)
            return 87;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return 197;
         }
         if ((active0 & 0x9dfef7a263c71bdcL) != 0L || (active1 & 0xf67ff1df7ce921cfL) != 0L || (active2 & 0x60937f1efccc004fL) != 0L || (active3 & 0x3fc73733fffbfff7L) != 0L || (active4 & 0x7018fdf3fd60L) != 0L || (active5 & 0x1fc0000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return 50;
         }
         if ((active2 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return 109;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
            return 20;
         if ((active0 & 0x85d88000000L) != 0L || (active1 & 0xe000306c030L) != 0L || (active2 & 0x60c00000132bf90L) != 0L || (active3 & 0xc038c08800040008L) != 0L || (active4 & 0x183e700080281L) != 0L || (active5 & 0x10000000000000L) != 0L)
            return 50;
         return -1;
      case 4:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 4;
            }
            return 196;
         }
         if ((active0 & 0x540160020850800L) != 0L || (active1 & 0xc407c04e40000000L) != 0L || (active2 & 0x6008000198c00000L) != 0L || (active3 & 0x384010010082e420L) != 0L || (active4 & 0x830800800L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x98bee1ea434213dcL) != 0L || (active1 & 0x327839913ee921efL) != 0L || (active2 & 0x937f1e640c1e4fL) != 0L || (active3 & 0x7872732ff791bd7L) != 0L || (active4 & 0x7190cd73f565L) != 0L || (active5 & 0x17c0000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 4;
            }
            return 50;
         }
         return -1;
      case 5:
         if ((active0 & 0x983c246a41421340L) != 0L || (active1 & 0x307318903a8101e7L) != 0L || (active2 & 0x3731a740c1e0dL) != 0L || (active3 & 0x2872712ed390bd7L) != 0L || (active4 & 0x5100cc726565L) != 0L || (active5 & 0x17c0000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 5;
            }
            return 50;
         }
         if ((active0 & 0x82c1800200009cL) != 0L || (active1 & 0x208210104682008L) != 0L || (active2 & 0x900c0400000042L) != 0L || (active3 & 0x3500002012401000L) != 0L || (active4 & 0x209021019000L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 5;
            }
            return 182;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000000000000L) != 0L)
            return 183;
         if ((active0 & 0x8820046800400200L) != 0L || (active1 & 0x20131810100101a2L) != 0L || (active2 & 0x2300a64001e0dL) != 0L || (active3 & 0x20030312e9380987L) != 0L || (active4 & 0x10000c722561L) != 0L || (active5 & 0x17c0000000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 6;
            }
            return 50;
         }
         if ((active0 & 0x101ca10241021140L) != 0L || (active1 & 0x106000802a800045L) != 0L || (active2 & 0x14310100c0000L) != 0L || (active3 & 0x284240004010250L) != 0L || (active4 & 0x4100c0004004L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8030044000400200L) != 0L || (active1 & 0x2012001000010082L) != 0L || (active2 & 0x2300024001e05L) != 0L || (active3 & 0x2000021088380984L) != 0L || (active4 & 0x100000700401L) != 0L || (active5 & 0x15c0000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 7;
            }
            return 50;
         }
         if ((active0 & 0x800002800000000L) != 0L || (active1 & 0x1180010000120L) != 0L || (active2 & 0xa40000008L) != 0L || (active3 & 0x3010261000003L) != 0L || (active4 & 0xc022160L) != 0L || (active5 & 0x200000000000000L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000200L) != 0L || (active1 & 0x2000001000010000L) != 0L || (active2 & 0x4L) != 0L || (active3 & 0x21088100984L) != 0L || (active4 & 0x400401L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8030040000400000L) != 0L || (active1 & 0x12000000000082L) != 0L || (active2 & 0x2300024001e01L) != 0L || (active3 & 0x2000000040280000L) != 0L || (active4 & 0x100000300000L) != 0L || (active5 & 0x17c0000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 8;
            return 50;
         }
         return -1;
      case 9:
         if ((active0 & 0x8010000000400000L) != 0L || (active1 & 0x12000000000000L) != 0L || (active2 & 0x24000601L) != 0L || (active4 & 0x100000300000L) != 0L || (active5 & 0x140000000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 9;
            }
            return 50;
         }
         if ((active0 & 0x20040000000000L) != 0L || (active1 & 0x82L) != 0L || (active2 & 0x2300000001800L) != 0L || (active3 & 0x2000000040280000L) != 0L || (active5 & 0x680000000000000L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active2 & 0x600L) != 0L)
            return 50;
         if ((active0 & 0x8010000000400000L) != 0L || (active1 & 0x12000000000000L) != 0L || (active2 & 0x24001001L) != 0L || (active4 & 0x100000300000L) != 0L || (active5 & 0x180000000000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return 50;
         }
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x2000000000000L) != 0L || (active2 & 0x24000000L) != 0L || (active4 & 0x100000200000L) != 0L)
            return 50;
         if ((active5 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8010000000400000L) != 0L || (active1 & 0x10000000000000L) != 0L || (active2 & 0x1401L) != 0L || (active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 11;
            return 50;
         }
         return -1;
      case 12:
         if ((active0 & 0x8010000000000000L) != 0L || (active2 & 0x400L) != 0L || (active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 12;
            return 50;
         }
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x10000000000000L) != 0L || (active2 & 0x1001L) != 0L)
            return 50;
         return -1;
      case 13:
         if ((active0 & 0x10000000000000L) != 0L || (active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 13;
            return 50;
         }
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active2 & 0x400L) != 0L)
            return 50;
         return -1;
      case 14:
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 50;
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 14;
            return 50;
         }
         return -1;
      case 15:
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 15;
            return 50;
         }
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 16;
            return 50;
         }
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 17;
            return 50;
         }
         return -1;
      case 18:
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x100000L) != 0L)
            return 50;
         return -1;
      case 19:
         if ((active5 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 319;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 332;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x180000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1800000000000L);
      case 37:
         return jjStopAtPos(0, 355);
      case 38:
         jjmatchedKind = 351;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 325);
      case 41:
         return jjStopAtPos(0, 326);
      case 42:
         return jjStopAtPos(0, 328);
      case 43:
         return jjStopAtPos(0, 333);
      case 44:
         return jjStopAtPos(0, 48);
      case 45:
         jjmatchedKind = 345;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x600004000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 329, 35);
      case 47:
         return jjStartNfaWithStates_0(0, 354, 266);
      case 58:
         jjmatchedKind = 330;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80020000000L);
      case 59:
         return jjStopAtPos(0, 305);
      case 60:
         jjmatchedKind = 335;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x118400000L);
      case 61:
         jjmatchedKind = 327;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000000L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 334;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000L);
      case 63:
         jjmatchedKind = 331;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1800000L);
      case 64:
         jjmatchedKind = 364;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x210000L);
      case 91:
         return jjStartNfaWithStates_0(0, 357, 77);
      case 93:
         return jjStopAtPos(0, 358);
      case 94:
         return jjStopAtPos(0, 356);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7fbffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xdf800000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7feffdf20000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x9800000000000000L, 0x1ffffL, 0x0L, 0x0L, 0x0L, 0x500000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ffe0000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fff40000000L, 0x10000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff80000000000000L, 0x7eL, 0x0L, 0x0L, 0x4e000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f80L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe000L, 0x0L, 0x0L, 0x800000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fe0000L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xff8000000L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fffb000000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xefe0000000000000L, 0x1L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3ffeL, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1c000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x300ffffe0000L, 0x0L, 0x200000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L, 0x7ffcfb000000000L, 0x1700000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L, 0xf800000000000000L, 0x3fdL, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x48ffc00L, 0x1000000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1f8000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fe00000000L, 0x10000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x7c0000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000000L, 0x0L);
      case 123:
         jjmatchedKind = 373;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x68000000000L);
      case 124:
         return jjStartNfaWithStates_0(0, 350, 275);
      case 125:
         return jjStopAtPos(0, 360);
      case 126:
         jjmatchedKind = 337;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x40000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active5 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 346);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000L);
      case 38:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 344);
         break;
      case 42:
         if ((active5 & 0x40000L) != 0L)
            return jjStopAtPos(1, 338);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000L);
      case 58:
         if ((active5 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 363);
         break;
      case 60:
         if ((active5 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 352);
         break;
      case 61:
         if ((active5 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 349);
         break;
      case 62:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 188);
         else if ((active5 & 0x200000L) != 0L)
            return jjStopAtPos(1, 341);
         else if ((active5 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 353);
         else if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1400000000000L);
      case 64:
         if ((active5 & 0x10000L) != 0L)
            return jjStopAtPos(1, 336);
         else if ((active5 & 0x400000L) != 0L)
            return jjStopAtPos(1, 342);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800001f20000000L, active1, 0x8000400000000L, active2, 0x1078060000L, active3, 0x380000100002000eL, active4, 0x800278000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000004L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x18L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active5 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 359);
         return jjMoveStringLiteralDfa2_0(active0, 0xe0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000001800000L, active1, 0x4000003fL, active2, 0x208018e000L, active3, 0x80007f80ff7c0010L, active4, 0x80000001L, active5, 0x200000000000000L);
      case 70:
      case 102:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 119, 50);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc0000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x200000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xfc000000000L, active1, 0L, active2, 0L, active3, 0x4001800000000000L, active4, 0xc00000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L, active1, 0x1300003000003c0L, active2, 0x301600000L, active3, 0xe000100000020L, active4, 0x1f101000004L, active5, 0xd10000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000e00L, active1, 0x400200800020000L, active2, 0L, active3, 0x800040L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40800L, active2, 0L, active3, 0L, active4, 0x740000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 144, 50);
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xb000L, active1, 0xf000000000180000L, active2, 0x20000000000001eL, active3, 0L, active4, 0x4027c00L, active5, 0x104e000000000000L);
      case 79:
      case 111:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7ee00008000000L, active1, 0x4001f000002000L, active2, 0x13ff0c06800080L, active3, 0x20000e00000000L, active4, 0x10a0000000010L, active5, 0x80000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0x400000000000000L, active3, 0x1L, active4, 0x18000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x700000L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180002000060000L, active1, 0x3c20000004000L, active2, 0x2000000000000000L, active3, 0xf80L, active4, 0xe0L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x200000L, active2, 0x1f40L, active3, 0L, active4, 0x8c0000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 50);
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0x40000000000000L, active4, 0L, active5, 0x40000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000040400000L, active1, 0x41c0000018000L, active2, 0x400c000000000000L, active3, 0x8000000001f000L, active4, 0x100L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3fc00000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000080000000L, active1, 0L, active2, 0L, active3, 0x600000000000000L, active4, 0x200L, active5, 0L);
      case 124:
         if ((active5 & 0x800000L) != 0L)
            return jjStopAtPos(1, 343);
         break;
      case 126:
         if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xe000000000000L);
      case 42:
         if ((active5 & 0x100000L) != 0L)
            return jjStopAtPos(2, 340);
         break;
      case 62:
         if ((active5 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 347);
         else if ((active5 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 348);
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 366);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 368);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800009c000001100L, active1, 0x4400000080000L, active2, 0x80000L, active3, 0x40000000040040L, active4, 0x20L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3802000000001000L, active4, 0x400L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000020020000L, active1, 0x3000000000e00000L, active2, 0x30000800000L, active3, 0x180000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 50);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 50);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x2000000400000000L, active3, 0L, active4, 0x8000L, active5, 0L);
      case 69:
      case 101:
         if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80060000000000L, active1, 0x3000000L, active2, 0x8400000000002000L, active3, 0x4000000000004180L, active4, 0xd00080000L, active5, 0L);
      case 70:
      case 102:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 50);
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x3L, active2, 0x80000000100000L, active3, 0x200000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 153, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x800200L, active1, 0x10000000000000L, active2, 0L, active3, 0x101400000L, active4, 0x1000000L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000004040000L, active2, 0x80L, active3, 0x110000000818600L, active4, 0x200801800L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000200000L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 50);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 50);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 50);
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xe00100000000L, active1, 0xc150000000cL, active2, 0x20c080000000000L, active3, 0x200000000L, active4, 0x700038702000L, active5, 0x800000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0x8000L, active2, 0x300000400000L, active3, 0x8024008000000000L, active4, 0x800000000105L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x38000002000000L, active1, 0x8200100000000000L, active2, 0x301000040L, active3, 0x200000002020000L, active4, 0x1001000000000L, active5, 0x80000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100100000000000L, active1, 0x3a20000004000L, active2, 0x400000001f00L, active3, 0x800000000800L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 260, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x40000008010000L, active2, 0L, active3, 0x20004000000L, active4, 0x4200L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000L, active4, 0x20000L, active5, 0x1000000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 299, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000040000L, active1, 0x1c200000000L, active2, 0x80000001L, active3, 0x2016L, active4, 0x200c0000000L, active5, 0L);
      case 83:
      case 115:
         if ((active5 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 362);
         return jjMoveStringLiteralDfa3_0(active0, 0x40001e00000004L, active1, 0x200000000201f0L, active2, 0x20002L, active3, 0x480340078000000L, active4, 0x4010000L, active5, 0x700000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 50);
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000089400818L, active1, 0x70000000L, active2, 0x400100103804001cL, active3, 0x400080000009L, active4, 0x1e000000000L, active5, 0x10000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800002000L, active2, 0L, active3, 0x1000000000000L, active4, 0xc0L, active5, 0L);
      case 86:
      case 118:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0x8000000000000L, active2, 0x2000800000000L, active3, 0x1000000020L, active4, 0L, active5, 0x40000000000000L);
      case 87:
      case 119:
         if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000004000000L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2040000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 50);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000002000000000L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0x700000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000002040040L, active1, 0x200045L, active2, 0x12110000800001L, active3, 0x20002000002L, active4, 0x200000008000L, active5, 0x40000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000082000L, active2, 0L, active3, 0L, active4, 0x80000100L, active5, 0x8000000000000L);
      case 67:
      case 99:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x60200000000L, active1, 0x1040420000a0L, active2, 0x18000000L, active3, 0x89d0L, active4, 0L, active5, 0x400000000000000L);
      case 68:
      case 100:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 210, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0x1000000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 50);
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 50);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 50);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 243, 50);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 245, 50);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 263, 50);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 265, 50);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 304, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000804L, active1, 0xc00000801040000aL, active2, 0x600004082004000eL, active3, 0x103000610000L, active4, 0x10004L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0x22000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 50);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 195, 50);
         else if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20420000L, active1, 0x10000000000000L, active2, 0x1000000000000L, active3, 0x100000000L, active4, 0x1c000000000L, active5, 0x10000000000000L);
      case 73:
      case 105:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 231, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x800198L, active1, 0x8000000000000L, active2, 0x200400400000L, active3, 0x4000001000001L, active4, 0xc024020L, active5, 0L);
      case 75:
      case 107:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 50);
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 297, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0x800000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 50);
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 303, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x1400200000011000L, active1, 0x1000081008810000L, active2, 0x8000000000000L, active3, 0x3802000204001000L, active4, 0L, active5, 0x800000000000000L);
      case 77:
      case 109:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000L, active1, 0x10000000000L, active2, 0L, active3, 0x200L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 50);
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 186, 50);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 50);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 290, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x18018000000000L, active1, 0x400000000000L, active2, 0x1e00L, active3, 0L, active4, 0x1800040L, active5, 0x6000000000000L);
      case 79:
      case 111:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x200000000000000L, active2, 0x80000000000L, active3, 0x200000000000420L, active4, 0x2c00L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 50);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 50);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 50);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 244, 50);
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x80000000000000L, active4, 0x1L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 191, 20);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 275, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x200004000000000L, active1, 0x2004000020000000L, active2, 0x400000000000L, active3, 0x40000000004000L, active4, 0x800000000L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 50);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 227, 50);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 238, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x120100000000000L, active1, 0xe04000000L, active2, 0x80000000000000L, active3, 0x40000000000L, active4, 0x100000000000L, active5, 0x80000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 50);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 50);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 50);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 50);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 165, 87);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 289, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x20000100000100L, active2, 0L, active3, 0x501200060000004L, active4, 0x400000000000L, active5, 0x300000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000L, active1, 0x3800000000000L, active2, 0x1100000040L, active3, 0x10098100000L, active4, 0x30000000L, active5, 0x1000000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x240000000L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 239, 50);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 288, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 185, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0x80000L, active4, 0x40000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0x810000000000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0x1e00L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000204200000000L, active1, 0x210028000000L, active2, 0x240000000L, active3, 0x200004000200L, active4, 0L, active5, 0x6000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x40L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0xb0000000000L, active3, 0x100000000080000L, active4, 0x500040L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0x1000000000000L, active4, 0x8000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 50);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 50);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 50);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 50);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 50);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 50);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 159, 50);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 205, 50);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 209, 50);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 215, 50);
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 291, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x21c000041000000L, active1, 0x2000000100000000L, active2, 0x80040000000000L, active3, 0x3480010000000890L, active4, 0x500021020000L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 279, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200004002000L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 50);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 50);
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000020000L, active1, 0x40008000010100L, active2, 0x11000000080001L, active3, 0x2040000001144L, active4, 0x8040000000L, active5, 0x1000000000000000L);
      case 75:
      case 107:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x82000L, active2, 0x2000000000040L, active3, 0x4000000000002L, active4, 0x120L, active5, 0x40000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000000L, active1, 0L, active2, 0x800000000L, active3, 0x201a000001L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 50);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 267, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x144L, active1, 0x8000010000000L, active2, 0x200000000000L, active3, 0x200000000000000L, active4, 0x200000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008L, active1, 0x20001000000080L, active2, 0L, active3, 0L, active4, 0x11080000005L, active5, 0x408000000000000L);
      case 80:
      case 112:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000000600000L, active2, 0x4000000L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 50);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 50);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 189, 50);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 190, 50);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 202, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000002000200L, active1, 0x200000000000022L, active2, 0x102004000eL, active3, 0x200e0300000L, active4, 0x10000L, active5, 0x300000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 50);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 50);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 50);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L, active3, 0x1010000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 50);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 50);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 50);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 197, 50);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 224, 50);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 236, 50);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 246, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000000L, active1, 0x180004000008L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0x80000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000002800001L, active2, 0L, active3, 0L, active4, 0x1400L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x400000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 50);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 50);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 206, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 229, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x800002000000000L, active1, 0L, active2, 0x1000041800L, active3, 0x4020208000000L, active4, 0x8500040L, active5, 0L);
      case 67:
      case 99:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x18004000000040L, active1, 0x20010000L, active2, 0L, active3, 0x4010000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 280, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x1000000010800000L, active2, 0L, active3, 0x880L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 50);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 50);
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 50);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 50);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 50);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 50);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 50);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 50);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 217, 50);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 220, 50);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 268, 50);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 271, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000010001000000L, active1, 0x80000000004L, active2, 0x400810000000L, active3, 0x200000L, active4, 0L, active5, 0x1000000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 50);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 301, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0x1L, active3, 0L, active4, 0x2000L, active5, 0L);
      case 72:
      case 104:
         if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 248, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0x1100008000020L, active2, 0x2000020000000L, active3, 0x60000001L, active4, 0x120L, active5, 0x340000000000000L);
      case 75:
      case 107:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 171, 50);
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 50);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 134, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x41L, active2, 0x20240000000L, active3, 0x80002L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 250, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 50);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 295, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x204800000000000L, active1, 0x40000000000180L, active2, 0x1000000080000L, active3, 0x82010080000050L, active4, 0x44000400L, active5, 0x400000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x600L, active3, 0x1041000000000L, active4, 0x204000L, active5, 0x8000000000000L);
      case 80:
      case 112:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 50);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 214, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000040400000L, active1, 0x20000000000002L, active2, 0x4000000L, active3, 0x200000000200L, active4, 0x100000000001L, active5, 0x80000000000000L);
      case 83:
      case 115:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 50);
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 285, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L, active2, 0x4L, active3, 0x2000000000100100L, active4, 0x80020000L, active5, 0x800000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 50);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 50);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 50);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 50);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 129, 50);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 50);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 50);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 272, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x2000000L, active2, 0L, active3, 0x1000004L, active4, 0x4000000000L, active5, 0x6000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000004L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L, active2, 0x300000000008L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 292, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 50);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x10002L, active2, 0x300020000008L, active3, 0L, active4, 0x1L, active5, 0x80000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L, active2, 0x600L, active3, 0x8000000L, active4, 0L, active5, 0x100000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x2000000000100L, active2, 0L, active3, 0x10260000000L, active4, 0x420000L, active5, 0x200000000000000L);
      case 68:
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 50);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 156, 50);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 247, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0x400L, active5, 0x40000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 50);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 50);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 50);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 50);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 50);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 50);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 50);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 50);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 50);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 124, 50);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 50);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 169, 50);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 208, 50);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 218, 50);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x2000000010000000L, active2, 0x4L, active3, 0x1080002L, active4, 0x4002000L, active5, 0x800000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 50);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 50);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 176, 50);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 198, 50);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 286, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x1000000000L, active2, 0x4000000L, active3, 0x1080100184L, active4, 0x104000000000L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 146, 50);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0x8000000000000L);
      case 77:
      case 109:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 249, 50);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 50);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 50);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 50);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 234, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000080L, active2, 0x800000000L, active3, 0x200000L, active4, 0x120L, active5, 0x400000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 174, 50);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 242, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0x1800L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 50);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 50);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x800002000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 50);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 183);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 50);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 50);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 50);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 237, 50);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 258, 50);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 270, 50);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 296, 50);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 302, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x10004000000200L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x8000040L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x240000000L, active3, 0x800L, active4, 0L, active5, 0x16000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 50);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 201, 50);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x2000000000000000L, active4, 0x100000000000L, active5, 0x40000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x200000L, active4, 0x300000L, active5, 0x1000000000000000L);
      case 68:
      case 100:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 50);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 269, 50);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 282, 50);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 50);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 50);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 158, 50);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 161, 50);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 192, 50);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 232, 50);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 262, 50);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 273, 50);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 283, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0x4000000400L, active5, 0x418000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 50);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 261, 50);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 264, 50);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20040000000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x600L, active3, 0L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 225, 50);
         break;
      case 76:
      case 108:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 131, 50);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 193, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x300020000000L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 50);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 50);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 240, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000001000000000L, active2, 0L, active3, 0x1080000080L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x4000000L, active3, 0x20000000104L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 216, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1800L, active3, 0x800L, active4, 0x1L, active5, 0x6000000000000L);
      case 83:
      case 115:
         if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 241, 50);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 50);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 50);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 50);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 163, 50);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L, active2, 0x1L, active3, 0x40000000L, active4, 0L, active5, 0x200000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0x1800L, active3, 0L, active4, 0x200000L, active5, 0xe000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x80L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0x400000000000000L);
      case 68:
      case 100:
         if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 266, 50);
         break;
      case 69:
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 50);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 203, 50);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 212, 50);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 219, 50);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 278, 50);
         else if ((active5 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 319, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x600L, active3, 0x40200000L, active4, 0L, active5, 0x200000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 100, 50);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 199, 50);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 223, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0x100000000000L, active5, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 50);
         break;
      case 78:
      case 110:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 194, 50);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 200, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x20040000000000L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 50);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 233, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L, active5, 0x10000000000000L);
      case 83:
      case 115:
         if ((active4 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 294);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000000000000L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 125, 50);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 50);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 228, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L, active5, 0x140000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x300000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 256, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0x600L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L);
      case 69:
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 65, 50);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 172, 50);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 173, 50);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 177, 50);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 253, 50);
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 319, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0x100000000000L, active5, 0x800000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x6000000000000L);
      case 78:
      case 110:
         if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 211, 50);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 213, 50);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 50);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x480000000000000L);
      case 89:
      case 121:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L, active5, 0x10000000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L, active4, active5);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x61e000000000000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000L, active2, 0x1000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x20000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x200000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L, active1, 0x10000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1L, active4, 0x100000L, active5, 0x800000000000000L);
      case 83:
      case 115:
         if ((active5 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 319, 50);
         break;
      case 84:
      case 116:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4000400L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L, active4, active5);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 157, 50);
         break;
      case 69:
      case 101:
         if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 277, 50);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 300, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x10000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x6000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x8000000000000L);
      case 78:
      case 110:
         if ((active5 & 0x800000000000000L) != 0L)
            return jjStopAtPos(11, 379);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x600000000000000L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 113, 50);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 154, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L, active4, active5);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x6000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x600000000000000L);
      case 71:
      case 103:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 140, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 50);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 128, 50);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0x8000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x10000000000000L);
      case 89:
      case 121:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 116, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2, 0L, active4, active5);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0x100000L, active5, 0x8000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      case 71:
      case 103:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 138, 50);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 63, 50);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x6000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x10000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x600000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L, 0L, active4, active5);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0x100000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x10000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x100000000000000L);
      case 69:
      case 101:
         if ((active5 & 0x8000000000000L) != 0L)
            return jjStopAtPos(14, 371);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x6000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x600000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 52, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, 0L, 0L, active4, active5);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x600000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x10000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x100000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active4, 0x100000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa16_0(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, 0L, 0L, active4, active5);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active5, 0x6000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active4, 0x100000L, active5, 0x600000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active5, 0x10000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active5, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa17_0(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4, active5);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x100000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x6000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x10000000000000L);
      case 78:
      case 110:
         if ((active5 & 0x200000000000000L) != 0L)
            return jjStopAtPos(17, 377);
         else if ((active5 & 0x400000000000000L) != 0L)
            return jjStopAtPos(17, 378);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active4, 0x100000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa18_0(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, active4, active5);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x6000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x10000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x100000000000000L);
      case 83:
      case 115:
         if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(18, 276, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa19_0(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active5, 0x6000000000000L);
      case 78:
      case 110:
         if ((active5 & 0x10000000000000L) != 0L)
            return jjStopAtPos(19, 372);
         break;
      case 89:
      case 121:
         if ((active5 & 0x100000000000000L) != 0L)
            return jjStopAtPos(19, 376);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa20_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
      return 20;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa21_0(active5, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa21_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active5, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa22_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa23_0(active5, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa23_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, 0L, active5);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa24_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, 0L, active5);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa25_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, 0L, active5);
      return 25;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa26_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa26_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, 0L, active5);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa27_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, 0L, active5);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa28_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, 0L, active5);
      return 28;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa29_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa29_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, 0L, active5);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa30_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, 0L, active5);
      return 30;
   }
   switch(curChar)
   {
      case 81:
      case 113:
         return jjMoveStringLiteralDfa31_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa31_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, 0L, active5);
      return 31;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa32_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, 0L, active5);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa33_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, 0L, active5);
      return 33;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa34_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa34_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, 0L, active5);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa35_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, 0L, active5);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa36_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, 0L, 0L, 0L, active5);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa37_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa37_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, 0L, 0L, 0L, active5);
      return 37;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa38_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa38_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, 0L, 0L, 0L, active5);
      return 38;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa39_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa39_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, 0L, 0L, 0L, active5);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa40_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, 0L, 0L, 0L, active5);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa41_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, 0L, 0L, 0L, active5);
      return 41;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa42_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa42_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, 0L, 0L, 0L, active5);
      return 42;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa43_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa43_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, 0L, 0L, 0L, active5);
      return 43;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa44_0(active5, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa44_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, 0L, 0L, 0L, 0L, 0L, active5);
      return 44;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x4000000000000L) != 0L)
            return jjStopAtPos(44, 370);
         break;
      default :
         break;
   }
   return jjStartNfa_0(43, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 275;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 232:
               case 50:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 116:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 23:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 6:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 199:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 277:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 16:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 110:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 21:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 158:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 115:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 170:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 159:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 279:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(251, 252); }
                  else if (curChar == 62)
                  {
                     if (kind > 308)
                        kind = 308;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 307)
                        kind = 307;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(249, 250); }
                  break;
               case 107:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 197:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 198:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 200:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 106:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 89:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 280:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  else if (curChar == 61)
                  {
                     if (kind > 309)
                        kind = 309;
                  }
                  break;
               case 236:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 111:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 22:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 196:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 5:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 87:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(92, 100); }
                  break;
               case 274:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 183:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(218, 217); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(207, 206); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(195, 194); }
                  break;
               case 281:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 182:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 20:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 3:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 90:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 109:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 231:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  else if (curChar == 40)
                     { jjCheckNAdd(121); }
                  break;
               case 39:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(40); }
                  break;
               case 226:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 276:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 278:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  else if (curChar == 61)
                  {
                     if (kind > 306)
                        kind = 306;
                  }
                  break;
               case 225:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 88:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 275:
               case 32:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 313)
                        kind = 313;
                     { jjCheckNAddStates(10, 16); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(17, 18); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(19, 22); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(66, 67); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 46)
                     { jjCheckNAdd(35); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(29, 30); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(26, 27); }
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 266:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(268, 269); }
                  else if (curChar == 47)
                  {
                     if (kind > 317)
                        kind = 317;
                     { jjCheckNAdd(47); }
                  }
                  break;
               case 25:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 26:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 61 && kind > 306)
                     kind = 306;
                  break;
               case 28:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 29:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (curChar == 61 && kind > 309)
                     kind = 309;
                  break;
               case 34:
                  if (curChar == 46)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  { jjCheckNAdd(38); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar == 39 && kind > 315)
                     kind = 315;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 315)
                     kind = 315;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar != 45)
                     break;
                  if (kind > 317)
                     kind = 317;
                  { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 317)
                     kind = 317;
                  { jjCheckNAdd(47); }
                  break;
               case 48:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 52:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 54:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 55:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 56:
                  if (curChar == 39 && kind > 322)
                     kind = 322;
                  break;
               case 57:
                  if (curChar == 39)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 58:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 60:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 65:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 66:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if (curChar == 34 && kind > 323)
                     kind = 323;
                  break;
               case 68:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(69, 71); }
                  break;
               case 69:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(69, 71); }
                  break;
               case 70:
                  if (curChar == 36 && kind > 323)
                     kind = 323;
                  break;
               case 71:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 74:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 77:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 78:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 82:
                  if (curChar == 32)
                     { jjAddStates(31, 32); }
                  break;
               case 92:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(92, 100); }
                  break;
               case 94:
                  if (curChar == 32)
                     { jjAddStates(33, 34); }
                  break;
               case 120:
                  if (curChar == 40)
                     { jjCheckNAdd(121); }
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(121, 122); }
                  break;
               case 122:
                  if (curChar == 41)
                     { jjCheckNAddTwoStates(123, 124); }
                  break;
               case 123:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(123, 124); }
                  break;
               case 126:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(35, 38); }
                  break;
               case 127:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(127, 142); }
                  break;
               case 129:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(129, 138); }
                  break;
               case 131:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(39, 40); }
                  break;
               case 151:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(6, 9); }
                  break;
               case 185:
                  if (curChar == 41 && kind > 257)
                     kind = 257;
                  break;
               case 186:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 195:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(195, 194); }
                  break;
               case 207:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(207, 206); }
                  break;
               case 218:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(218, 217); }
                  break;
               case 248:
                  if (curChar == 60)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 249:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(249, 250); }
                  break;
               case 250:
                  if (curChar == 61 && kind > 307)
                     kind = 307;
                  break;
               case 251:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(251, 252); }
                  break;
               case 252:
                  if (curChar == 62 && kind > 308)
                     kind = 308;
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 313)
                     kind = 313;
                  { jjCheckNAddStates(10, 16); }
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(254, 34); }
                  break;
               case 255:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(255, 256); }
                  break;
               case 256:
                  if (curChar != 46)
                     break;
                  if (kind > 312)
                     kind = 312;
                  jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 258:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(259); }
                  break;
               case 259:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  { jjCheckNAdd(259); }
                  break;
               case 260:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(260, 261); }
                  break;
               case 262:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(263); }
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  { jjCheckNAdd(263); }
                  break;
               case 264:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 313)
                     kind = 313;
                  { jjCheckNAdd(264); }
                  break;
               case 265:
                  if (curChar == 47)
                     { jjAddStates(17, 18); }
                  break;
               case 267:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(268, 269); }
                  break;
               case 268:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(268, 269); }
                  break;
               case 269:
                  if (curChar == 42)
                     { jjCheckNAddStates(41, 43); }
                  break;
               case 270:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(271, 269); }
                  break;
               case 271:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(271, 269); }
                  break;
               case 272:
                  if (curChar == 47 && kind > 318)
                     kind = 318;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 232:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  break;
               case 116:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 23:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 6:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 199:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 277:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  break;
               case 16:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 110:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 21:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 158:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 230)
                        kind = 230;
                  }
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 115:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(119); }
                  else if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(114); }
                  break;
               case 170:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 159:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 107:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 197:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 200:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 106:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 89:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 236:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 111:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 22:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 196:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 5:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 87:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 274:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(52); }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  break;
               case 183:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 217;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 206;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 281:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  break;
               case 182:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 20:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 3:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 90:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 109:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 231:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(53, 54); }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 39:
               case 50:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 226:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 276:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 225:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(119); }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(114); }
                  break;
               case 88:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 275:
               case 33:
                  if (curChar == 124 && kind > 310)
                     kind = 310;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 319)
                        kind = 319;
                     { jjCheckNAdd(50); }
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 77;
                  else if (curChar == 96)
                     { jjCheckNAdd(74); }
                  else if (curChar == 124)
                     { jjAddStates(55, 56); }
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAdd(52); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(57, 61); }
                  else if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(66, 70); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(71, 73); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(74, 75); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(79, 80); }
                  else if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 2:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x4000000040000L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L && kind > 281)
                     kind = 281;
                  break;
               case 11:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x200000002000000L & l) != 0L && kind > 281)
                     kind = 281;
                  break;
               case 19:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 31:
                  if (curChar == 124)
                     { jjAddStates(55, 56); }
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(81, 82); }
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(83, 84); }
                  break;
               case 42:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 43:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(44); }
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 315)
                     kind = 315;
                  { jjCheckNAdd(44); }
                  break;
               case 47:
                  if (kind > 317)
                     kind = 317;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 51:
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 55:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 59:
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 61:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  { jjAddStates(85, 86); }
                  break;
               case 69:
                  { jjAddStates(87, 88); }
                  break;
               case 73:
                  if (curChar == 96)
                     { jjCheckNAdd(74); }
                  break;
               case 74:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 75:
                  if (curChar == 96 && kind > 323)
                     kind = 323;
                  break;
               case 76:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
               case 78:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if (curChar == 93 && kind > 323)
                     kind = 323;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(79, 80); }
                  break;
               case 81:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 83:
                  if ((0x4000000040000L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 84:
               case 95:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(83); }
                  break;
               case 85:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 91:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 98:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 102:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(74, 75); }
                  break;
               case 104:
                  if ((0x10000000100L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 105:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 108:
                  if ((0x2000000020L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 112:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(71, 73); }
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 117:
                  if ((0x200000002000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 118:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  break;
               case 124:
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 125:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(126); }
                  break;
               case 128:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 130:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 132:
                  if ((0x2000000020L & l) != 0L && kind > 311)
                     kind = 311;
                  break;
               case 133:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 137:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 140:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 144:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(126); }
                  break;
               case 146:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(119); }
                  break;
               case 153:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(66, 70); }
                  break;
               case 155:
                  if ((0x1000000010L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 156:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 160:
                  if ((0x10000000100000L & l) != 0L && kind > 230)
                     kind = 230;
                  break;
               case 161:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x100000001000L & l) != 0L && kind > 230)
                     kind = 230;
                  break;
               case 166:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x4000000040000L & l) != 0L && kind > 281)
                     kind = 281;
                  break;
               case 168:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 171:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x8000000080L & l) != 0L && kind > 281)
                     kind = 281;
                  break;
               case 173:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 181:
                  if ((0x8000000080000L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 184:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  { jjCheckNAdd(186); }
                  break;
               case 187:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 188:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 201:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 202:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 203:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  { jjCheckNAdd(186); }
                  break;
               case 204:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(203); }
                  break;
               case 205:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 208:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 209:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 214:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 215:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(203); }
                  break;
               case 216:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 219:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 220:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(57, 61); }
                  break;
               case 227:
                  if ((0x1000000010000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 228:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 233:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if ((0x200000002000L & l) != 0L && kind > 281)
                     kind = 281;
                  break;
               case 237:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(119); }
                  break;
               case 239:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  break;
               case 241:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 257:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(89, 90); }
                  break;
               case 261:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(91, 92); }
                  break;
               case 268:
                  { jjCheckNAddTwoStates(268, 269); }
                  break;
               case 270:
               case 271:
                  { jjCheckNAddTwoStates(271, 269); }
                  break;
               case 273:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 232:
               case 50:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 116:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 199:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 277:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 16:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 110:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 21:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 158:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 115:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 170:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 159:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 107:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 197:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 198:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 200:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 106:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 89:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 236:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 111:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 196:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 87:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 274:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 183:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 281:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 182:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 20:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 90:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 109:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 231:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 39:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 226:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 276:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 225:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 88:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(50); }
                  break;
               case 47:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 317)
                     kind = 317;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 59:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(85, 86); }
                  break;
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(87, 88); }
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(29, 30); }
                  break;
               case 77:
               case 78:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 268:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(268, 269); }
                  break;
               case 270:
               case 271:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(271, 269); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 275 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\46\46", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\54", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\75\76", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\75", "\52", "\56", "\72", "\77", 
"\41", "\53", "\76", "\74", "\100\100", "\176", "\176\52", "\41\176", "\41\176\52", 
"\100\76", "\74\100", "\77\174", "\77\46", "\55", "\55\43", "\74\55\76", "\74\43\76", 
"\72\75", "\174", "\46", "\74\74", "\76\76", "\57", "\45", "\136", "\133", "\135", null, 
"\175", null, null, "\72\72", "\100", "\55\76", "\55\76\76", "\43\76", "\43\76\76", 
null, null, null, null, "\173", null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   53, 55, 56, 58, 59, 56, 120, 123, 124, 151, 254, 34, 255, 256, 260, 261, 
   264, 266, 267, 249, 250, 251, 252, 53, 55, 56, 58, 59, 56, 74, 75, 82, 
   85, 94, 96, 127, 142, 129, 138, 131, 135, 269, 270, 272, 120, 124, 151, 214, 
   218, 202, 207, 183, 195, 144, 150, 32, 33, 226, 234, 237, 239, 247, 181, 200, 
   212, 223, 159, 164, 166, 171, 179, 116, 118, 153, 107, 112, 181, 8, 274, 90, 
   102, 37, 38, 40, 41, 66, 67, 69, 71, 258, 259, 262, 263, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 323 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      if ( !configuration.getAsBoolean(Feature.allowSquareBracketQuotation) && matchedToken.image.charAt(0) == '[' ) {
         matchedToken.image = "[";
         for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
            if (CCJSqlParserConstants.tokenImage[i].equals("\"[\"")) {
                matchedToken.kind = i;
            }
         }
         input_stream.backup(image.length() - 1);
       }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise com.javaoffers.thrid.sqlparse.parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 275; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise com.javaoffers.thrid.sqlparse.parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x8bffffffffffffffL, 0x1fffffffffffffecL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x6000000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x6000000000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[275];
    private final int[] jjstateSet = new int[2 * 275];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
